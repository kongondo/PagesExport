<?php
/**
 * ProcessWire Page Export and Import
 *
 * ProcessWire 3.x, Copyright 2017 by Ryan Cramer
 * https://processwire.com
 * 
 * Note: this module supports page-edit-export and page-edit-import permissions, but currently the module is 
 * designed only for use by superuser, so don't bother adding those permissions at present. 
 * 
 * @todo ZIP file support
 * @todo Repeater support
 * @todo PageTable support
 *
 */

class ProcessPagesExport extends Process {

	
	
	public static function getModuleInfo() {
		return array(
			'title' => 'Pages Export',
			'summary' => 'Enables exporting of pages from older ProcessWire versions for later importing into ProcessWire 3.x sites using ProcessPagesExportImport or PagesExportImport. Development version, not yet recommended for production use.',
			'version' => 1,
			'author' => 'Ryan Cramer, Francis Otieno (Kongondo)',
			'icon' => 'paper-plane-o',
			'permission' => 'page-edit-export', 
			// @kongondo: @note: Works in PW > 2.4; in older versions, we'll install old style @see install()
			'page' => array(
				//'name' => 'export',// @kongondo
				'name' => self::PAGE_NAME,
				'parent' => 'admin',
				'title' => 'Export Pages'
			)
		);
	}
	
	const debug = false;
	const PAGE_NAME = 'export';// @kongondo

	/**
	 * @var PagesExport
	 * 
	 */
	protected $exporter;
	// @kongondo
	private $versionMinor;// for storing ProcessWire version minor
	private $formClass;// CSS class to help target older ProcessWire versions


	/********************* @kongondo *********************/

	
	/**
	 * Set up.
	 *
	 * @access public
	 *
	 */
    public function __construct() {

		// include helper class
		$dir = dirname(__FILE__);
		require_once("$dir/PagesExport.php");
		$this->exporter = new PagesExport();
		$this->versionMinor = $this->exporter->compatibilityCheck();

		/* 
			@kongondo: @note:
			- css classes to help with 'custom' showIf since not available in PW versions < 2.3
			- also using in 2.4 - 2.5 where showIf had JS error when | used to separate conditions.
		*/

		$this->formClass = 'ProcessPagesExportCustom';
		if($this->versionMinor < 4) $this->formClass .= ' PW_23';// for 2.2 and 2.3
		elseif($this->versionMinor == 4 ) $this->formClass .= ' PW_24';
		elseif($this->versionMinor == 5 ) $this->formClass .= ' PW_25';

	}

	/**
	 * For debugging __call() only.
	 *
	 * @kongondo: @note: 
	 * 
	 * @access private
	 * @param string $name Name of the method.
	 * @param array $arguments Method arguments.
	 * @param integer $mode Whether to exit (2) or not (1).
	 * 
	 */
	private function callOutput($name, $arguments, $mode=1) {
		echo '<pre>';
		print_r($arguments);
		echo '</pre>';
        // Note: value of $name is case sensitive.
        echo "Calling object method '$name' "
			 . implode(', ', $arguments). "\n";
		if($mode == 2 ) exit;

	}

	/**
	 * Fallback for older ProcessWire versions (< 2.4) without $this->wire().
	 * 	 
	 * We use PHP magic method __call() to fallback to wire().
	 * Also use it for 'install', 'uninstall' and 'execute'.
	 *
	 * @access public
	 * @param string $name Name of the method.
	 * @param array $arguments Method arguments.
	 * 
	 */
	public function __call($name, $arguments) {
		if($name == 'wire') return wire($arguments[0]);
		elseif($name == 'install') return $this->oldSchoolInstall();
		elseif($name == 'uninstall') return $this->oldSchoolUninstall();
		elseif($name == 'execute') return $this->___execute();
    }
	
	/**
	 * Manual creation of module's page on install.
	 * 
	 * For ProcessWire versions < 2.4.
	 *
	 * @access private
	 * 
	 */
	private function oldSchoolInstall() {

		$pages = $this->wire('pages');	

		// create Export Pages Admin page
		$page = $pages->get('template=admin, name='.self::PAGE_NAME);
		if (!$page->id) {

			$page = new Page();
			$page->template = 'admin';
			$page->parent = $pages->get($this->wire('config')->adminRootPageID);
			$page->title = 'Export Pages';
			$page->name = self::PAGE_NAME;
			$page->process = $this;
			$page->save();

			// tell the user we created this page
			$this->message("Created Page: {$page->path}");
		}
		/* @kongondo: 
			@todo?
			 - we'll wait with 'page-edit-export' permission until officially supported by original module
			 - or we may just leave it out altogether, allowing only Superusers to use the module.
		
		// we create the permission 'page-edit-export' to limit access to the module
		$permission = $this->wire('permissions')->get('page-edit-export');
		if (!$permission->id) {
			$p = new Permission();
			$p->name = 'page-edit-export';
			$p->title = $this->_('Use Page Export');
			$p->save();

			// tell the user we created this module's permission
			$this->message("Created New Permission: page-edit-export");
		} */
		
	}

	/**
	 * Manucal delete of module's page on uninstall.
	 * 
	 * For ProcessWire versions < 2.4.
	 *
	 * @access private
	 * 
	 */
	private function oldSchoolUninstall() {

		// find and delete the Proces module page we created on install
		$page = $this->wire('pages')->get('template=admin, name='.self::PAGE_NAME);
		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleted Page: {$page->path}");
			$page->delete();
		}
		/* 
		// find and delete the page-edit-export permission and let the user know
		$permission = $this->wire('permissions')->get('page-edit-export');
		if ($permission->id){
			$permission->delete();
			$this->message("Deleted Permission: page-edit-export");
		} */


	}


	/*********************** @ORIGINAL CODE FROM ProcessPagesExportImport.module  *******************/
	// @kongondo: @note: code  amended as required for this module

	/**
	 * Main execution handler
	 * 
	 * @return string
	 * @throws \Exception
	 * 
	 */
	public function ___execute() {
	
		if(!$this->wire('user')->isSuperuser()) {
			throw new WirePermissionException($this->_('Export is currently only available to superuser')); 
		}

		// @kongondo
		/* $this->exportImport = new PagesExportImport();
		$this->wire($this->exportImport);
		$this->exportImport->cleanupFiles(600); */
		
		$this->wire($this->exporter);		
		$this->exporter->cleanupFiles(600);
		
		$input = $this->wire('input');
		$user = $this->wire('user');
		$breadcrumbLabel = $this->wire('page')->title;

		try {
			if($input->post('submit_export')) {
				if($user->hasPermission('page-edit-export')) {
					// @kongondo				
					/* $this->breadcrumb('./', $breadcrumbLabel);
					$this->headline($this->_('Export')); */
					if(method_exists($this, 'breadcrumb')) $this->breadcrumb('./', $breadcrumbLabel);
					if(method_exists($this, 'headline')) $this->headline($this->_('Export'));
					return $this->processExport();
				}
			} 
			else {
				$warning = 'Please note this is a development version of pages export ' . 
					'and not yet recommended for production use.';
				// wire::warning no in ProcessWire < 2.6
				if(method_exists($this, 'warning')) $this->warning($warning);
				else $this->message($warning);				
				
				$form = $this->buildForm();
				return $form->render();
			}
		} catch(\Exception $e) {
			if(self::debug) throw $e;			
			// @kongondo: @note: causes infinite loop; just show error instead of redirect
			//$this->wire('session')->redirect($this->wire('page')->url); 
			$this->error($e->getMessage());
		}
		
		return '';
	}

	/**
	 * Build the main import/export form 
	 * 
	 * param string $tab Optionally specify which tab to include, “export” or “import”
	 * return InputfieldForm|InputfieldWrapper
	 * @return InputfieldForm
	 * 
	 */
	//protected function buildForm($tab = '') {// @kongondo
	protected function buildForm() {
		
		$modules = $this->wire('modules');
		$modules->get('JqueryWireTabs'); 
		$user = $this->wire('user');	
		
		$form = $modules->get('InputfieldForm');
		$form->attr('id', 'ProcessPagesExport');
		// @kongondo
		if($this->formClass) $form->attr('class', $this->formClass);
		$form->attr('method', 'post'); 
		$form->attr('enctype', 'multipart/form-data');
		
		if($user->hasPermission('page-edit-export')) {
			//if(!$tab || $tab == 'export') $form->add($this->buildExportTab());
			$form = $this->buildExportTab($form);
		}
				
		return $form;
	}	

	/**
	 * Build the export tab
	 * @todo:
	 * @return InputfieldWrapper
	 * 
	 */
	//protected function buildExportTab() {
	protected function buildExportTab($form) {

		$modules = $this->wire('modules');
		
		// @kongondo: @note: not using tabs
		/* $tab = new InputfieldWrapper();
		$tab->attr('id+name', 'tab_export');
		$tab->attr('title', $this->_('Export')); */
		#$tab->addClass('WireTab');
		
		$f = $modules->get('InputfieldRadios');
		$f->attr('name', 'export_type'); 
		$f->label = $this->_('What pages do you want to export?'); 
		$f->icon = 'sitemap';
		$f->addOption('specific', $this->_('Pages that I select'));
		$f->addOption('parent', $this->_('Pages having parent'));
		$f->addOption('selector', $this->_('Pages matching search'));
		//$tab->add($f);
		$form->add($f);
		
		$f = $modules->get('InputfieldPageListSelectMultiple');
		$f->attr('name', 'pages_specific');
		$f->label = $this->_('Select pages');
		$f->description = $this->_('Select one or more pages to include in the export.');
		$f->icon = 'crosshairs';
		$f->showIf = 'export_type=specific';
		//$tab->add($f);
		$form->add($f);
		
		$f = $modules->get('InputfieldPageListSelect');
		$f->attr('name', 'pages_parent');
		$f->label = $this->_('Select parent page');
		$f->description = $this->_('Select the parent of the pages you want to export. The children of this page will be exported.'); 
		$f->icon = 'child';
		$f->showIf = 'export_type=parent';
		//$tab->add($f);
		$form->add($f);
		
		$f = $modules->get('InputfieldCheckboxes');
		$f->attr('name', 'options_parent');
		$f->label = $this->_('Additional options');
		$f->icon = 'sliders';
		$f->showIf = 'export_type=parent';
		$f->addOption('parent', $this->_('Include the parent page in the export'));
		/* @kongondo (UiKit thing)
		$f->addOption('recursive', $this->_('Recursive') . ' ' .  
			'[span.detail] (' . $this->_('Exports tree of pages rather than just direct children') . ') [/span]');
			
		*/
		$f->addOption('recursive', $this->_('Recursive') . ' ' .  
			'(' . $this->_('Exports tree of pages rather than just direct children') . ')');
		$f->addOption('hidden', $this->_('Include hidden pages'));
		$f->addOption('unpublished', $this->_('Include hidden and unpublished pages'));
		//$tab->add($f);
		$form->add($f);

		/* @kongondo: @note:
			- InputfieldSelector not available in ProcessWire 2.4 or older
			- use text input instead
		*/
		// pages_selector: InputfieldSelector
		if($this->wire('modules')->isInstalled('InputfieldSelector')) {
			$f = $modules->get('InputfieldSelector');
			$f->label = $this->_('Build a search to match pages for export');
			$f->description = $this->_('Add one or more fields to search and match pages for export.');
			$f->icon = 'map-o';			
		}
		// pages_selector: InputfieldText
		else {
			$f = $modules->get('InputfieldText');
			$f->label = $this->_('Create a search to match pages for export');
			$f->description = $this->_('Enter a valid ProcessWire selector to search and match pages for export.');
		}
		$f->attr('name', 'pages_selector');
		$f->showIf = 'export_type=selector';
		//$tab->add($f);
		$form->add($f);
				
		$f = $modules->get('InputfieldCheckboxes'); 
		$f->attr('name', 'export_fields');		
		$f->label = $this->_('Export fields'); 
		$f->description = 
			$this->_('By default, all supported fields on a page are included in the export.') . ' ' . 
			$this->_('If you want your export to only include certain fields, then select them here.') . ' ' . 
			$this->_('If no selection is made, then all supported fields are included in the export.');
		$f->icon = 'cube';

		/*
			@kongondo: @note:
			- if in version 2.5 or less, we get JS error about unknown expression
			- error: '#Inputfield_export_type_specific|parent|selector'
			- JS still throws error evem if pipe (|) is escaped
			- so, we just ignore (no showIf) this in PW < 2.5 and use custom JS showIf
			- for PW version > 2.5, we use showIf
		*/		
		
		//if($this->versionMinor < 6) $showIf = "export_type=specific\\|parent\\|selector";// 
		if($this->versionMinor < 6) $showIf = "";
		else $showIf = 'export_type=specific|parent|selector';
		
		$f->showIf = $showIf; 
		$f->table = true;
		$f->collapsed = Inputfield::collapsedBlank;
		$f->thead = 
			$this->_('Name') . '|' . 
			$this->_('Label') . '|' . 
			$this->_('Type');
		foreach($this->getExportableFields() as $field) {
			$typeName = str_replace('Fieldtype', '', $field->type->className()); 
			$f->addOption($field->name, "$field->name|$field->label|$typeName"); 
		}
		//$tab->add($f);
		$form->add($f);
	
		
		$f = $modules->get('InputfieldRadios');
		$f->attr('name', 'export_to');
		$f->label = $this->_('How do you want to save the export?'); 
		$f->addOption('zip', $this->_('Download ZIP file'));
		$f->addOption('json', $this->_('Text for copy/paste')); 
		$f->attr('value', 'zip');
		$f->description = $this->_('Always choose the ZIP file option if you want to include file or image fields in your export.');
		$f->showIf = $showIf; 
		//$f->collapsed = Inputfield::collapsedYes;// @kongondo
		//$tab->add($f);
		$form->add($f);
		
		
		/** @var InputfieldSubmit $f */
		$f = $modules->get('InputfieldSubmit');
		$f->attr('name', 'submit_export');
		$f->value = $this->_('Export Now');
		$f->showIf = $showIf;
		$f->icon = 'download';
		// @kongonde: changed to normal radios above since incompatible with PW < 3.X
		#$f->addActionValue('json', $this->_('JSON for copy/paste (default)'), 'scissors');
		#$f->addActionValue('zip', $this->_('ZIP file download') . ' (experimental)', 'download');
		//$tab->add($f);
		$form->add($f);
		
		//return $tab;
		return $form;
	}

	/**
	 * Process submitted export form 
	 * 
	 * @return string
	 * @throws WireException
	 * 
	 */
	protected function processExport() {
			
		// export_type: string(specific, parent, selector)
		// pages_specific: array(page IDs)
		// pages_parent: integer(page ID)
		// pages_selector: string(selector)
		// options_parent: array('parent', 'recursive')
		// export_fields: array(field names)
		// export_to: string(zip, json)

		/** @var Pages $pages */
		$pages = $this->wire('pages');
		/** @var WireInput $input */
		$input = $this->wire('input');

		$form = $this->buildForm();
		$form->processInput($input->post);
		/** @var InputfieldFieldset $tab */
		//$tab = $form->getChildByName('tab_export');// @kongndo @note: we are not using tabs
		$post = $input->post;
		
		// @kongondo: @note: here and elsewhere changed val() to getAttribute('value'); (if using tabs)
		// @kongondo: @note: here and elsewhere we are not using tabs
		/*
		$exportType = $tab->getChildByName('export_type')->getAttribute('value');		
		$exportFields = $tab->getChildByName('export_fields')->getAttribute('value');
		//$exportTo = $input->post('submit_export') === 'zip' ? 'zip' : 'json';
		*/
		$exportType = $post->export_type;
		$exportFields = $post->export_fields;
		$exportTo = $post->export_to === 'zip' ? 'zip' : 'json';	
		
		// @todo security and access control
		// @todo paginate large sets
		
		// determine pages to export
		switch($exportType) {
			case 'specific':
				//$exportIDs = $tab->getChildByName('pages_specific')->getAttribute('value');
				$exportIDs = $post->pages_specific;// @kongondo
				$exportPages = count($exportIDs) ? $pages->getById($exportIDs) : new PageArray();				
				break;
			case 'parent':
				//$parentID = (int) $tab->getChildByName('pages_parent')->getAttribute('value');
				$parentID = (int) $post->pages_parent;// @kongondo
				$exportParent = $parentID ? $pages->get($parentID) : new NullPage();
				if(!$exportParent->id) {
					// @kongondo
					//throw new WireException('Unable to load parent for export');					
					$this->error("Unable to load parent for export");			
					$this->wire('session')->redirect($this->wire('page')->url);
				}
				//$exportOptions = $tab->getChildByName('options_parent')->getAttribute('value');
				$exportOptions = is_array($post->options_parent) ? $post->options_parent : array();// @kongondo	

				$includeMode = '';
				if(in_array('unpublished', $exportOptions)) {
					/* @kongondo @note:
						- include=unpublished not available in PW < 2.5
					 	- so, we fall back on include=all. OK since this used with a selected parent
					*/
					//$includeMode = 'include=unpublished';
					$includeMode = $this->versionMinor < 5 ? 'include=all' : 'include=unpublished';
				} else if(in_array('hidden', $exportOptions)) {
					$includeMode = 'include=hidden';
				}
				if(in_array('recursive', $exportOptions)) {
					$exportPages = $pages->find("has_parent=$parentID" . ($includeMode ? ", $includeMode" : "")); 
				} else {
					$exportPages = $exportParent->children($includeMode);
				}
				if(in_array('parent', $exportOptions)) {
					$exportPages->prepend($exportParent); 
				}
				break;
			case 'selector':
				//$exportSelector = $tab->getChildByName('pages_selector')->getAttribute('value');
				$exportSelector = $post->pages_selector;// @kongondo
				$exportPages = $pages->find($exportSelector);

				break;
			default:
				$exportPages = new PageArray();
		}

		$exportCount = $exportPages->getTotal();
		if(!$exportCount) {
			// @kongondo			
			//throw new WireException("No pages to export");
			$this->error("No pages to export");		
			$this->wire('session')->redirect($this->wire('page')->url);
		}
	
		//$exporter = new PagesExport();// @kongondo
		$exporter = $this->exporter;// @kongondo
		$this->wire($exporter);
		$exportOptions = array();
		if(count($exportFields)) $exportOptions['fieldNames'] = $exportFields;
		
		if($exportTo == 'json') {
			// json
			$json = $exporter->exportJSON($exportPages, $exportOptions);
			$form = $this->wire('modules')->get('InputfieldForm');
			$form->attr('id', 'ProcessPagesExport');// @kongondo
			if($this->formClass) $form->attr('class', $this->formClass);// @kongondo
			$f = $this->wire('modules')->get('InputfieldTextarea');
			$f->attr('id+name', 'export_json');
			$f->label = $this->_('Pages export data for copy/paste');
			$f->description = sprintf(
				$this->_n('This export includes %d page.', 'This export includes %d pages.', $exportCount), 
				$exportCount
				) . ' ' . 
				$this->_('Click anywhere in the text below to select it for copy.') . ' ' . 
				$this->_('You can then paste this text to the Import tab of another installation.');
				
			//$f->val($json);// @kongondo
			$f->setAttribute('value', $json);
			$form->add($f);
			return $form->render() . "<p><a href='./'>" . $this->_('Run another export') . "</a></p>";
			
		} else if($exportTo == 'zip') {
			// zip file download
			$zipFile = $exporter->exportZIP($exportPages, $exportOptions);
			if($zipFile) {
				// @kongondo
				/* $this->wire('files')->send($zipFile, array(
					'forceDownload' => true,
					'exit' => false
				)); */
				// @kongondo: @todo: maybe clear previous selections after export?
				// @kongondo @note: see PagesExport.php; borrowed from newer versions of WireHttp class
				$exporter->sendFile($zipFile, array(
					'forceDownload' => true,
					'exit' => false
				));
				unlink($zipFile);
				exit;
			} else {
				// @kongondo
				//throw new WireException('Export failed during ZIP file generation');
				$this->error("Export failed during ZIP file generation");			
				$this->wire('session')->redirect($this->wire('page')->url);
			}
		}
		
		return '';
	}

	/**
	 * Get array of exportable fields
	 * 
	 * @return array Array of fieldName => Field object
	 * 
	 */
	protected function getExportableFields() {
		//$exporter = new PagesExport();// @kongondo
		$fields = array();
		foreach($this->wire('fields') as $field) {
			if(!$field->type) continue;	
			$info = $this->exporter->getFieldInfo($field);
			if($info['exportable']) $fields[$field->name] = $field;
		}
		ksort($fields);
		return $fields;
	}

	/**
	 * Install module
	 * 
	 */
	public function ___install() {
		// @kongondo
		// install: old school install (ProcessWire version < 2.5)
		if($this->versionMinor < 5) $this->oldSchoolInstall();
		// install: newer ProcessWire versions install
		else parent::___install();		
	}

	/**
	 * Uninstall module
	 * 
	 */
	public function ___uninstall() {
		// @kongondo
		// uninstall: old school uninstall (ProcessWire version < 2.5)
		if($this->versionMinor < 5) $this->oldSchoolUninstall();
		// uninstall: newer ProcessWire versions uninstall
		else parent::___uninstall(); 
	}
	
}

